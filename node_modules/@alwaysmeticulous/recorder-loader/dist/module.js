const $5d774bdb3a883001$var$DEFAULT_MAX_MS_TO_BLOCK_FOR = 2000;
const $5d774bdb3a883001$export$f80553af9d70f9fd = async (options)=>{
    // Try to load the recorder and silence any initialisation error.
    await $5d774bdb3a883001$var$unsafeLoadAndStartRecorder(options).catch((error)=>{
        console.error(error);
    });
};
const $5d774bdb3a883001$var$unsafeLoadAndStartRecorder = ({ projectId: projectId , uploadIntervalMs: uploadIntervalMs , snapshotLinkedStylesheets: snapshotLinkedStylesheets , commitHash: commitHash , maxMsToBlockFor: maxMsToBlockFor_ , snippetsBaseUrl: snippetsBaseUrl , forceRecording: forceRecording , responseSanitizers: responseSanitizers , isProduction: isProduction  })=>{
    let abandoned = false;
    return new Promise((resolve, reject)=>{
        const maxMsToBlockFor = maxMsToBlockFor_ ?? $5d774bdb3a883001$var$DEFAULT_MAX_MS_TO_BLOCK_FOR;
        if (maxMsToBlockFor > 0) setTimeout(()=>{
            abandoned = true;
            resolve();
        }, maxMsToBlockFor);
        const script = document.createElement("script");
        script.type = "text/javascript";
        const baseSnippetsUrl = snippetsBaseUrl || "https://snippet.meticulous.ai";
        script.src = new URL("v1/meticulous-manual-init.js", baseSnippetsUrl).href;
        // Setup configuration
        const typedWindow = window;
        typedWindow.METICULOUS_RECORDING_TOKEN = projectId;
        if (uploadIntervalMs !== undefined) typedWindow.METICULOUS_UPLOAD_INTERVAL_MS = uploadIntervalMs;
        if (commitHash !== undefined) typedWindow.METICULOUS_APP_COMMIT_HASH = commitHash;
        if (snapshotLinkedStylesheets !== undefined) typedWindow.METICULOUS_SNAPSHOT_LINKED_STYLESHEETS = snapshotLinkedStylesheets;
        if (forceRecording !== undefined) typedWindow.METICULOUS_FORCE_RECORDING = forceRecording;
        if (isProduction !== undefined) typedWindow.METICULOUS_IS_PRODUCTION_ENVIRONMENT = isProduction;
        if (responseSanitizers != null && responseSanitizers.length > 0) typedWindow.METICULOUS_NETWORK_RESPONSE_SANITIZERS = responseSanitizers;
        script.onload = function() {
            if (abandoned) {
                console.debug("Meticulous snippet abandoned due to max blocking time reached.");
                // At this point the promise has already resolved.
                return;
            }
            const initialiseRecorder = window.__meticulous?.initialiseRecorder;
            if (typeof initialiseRecorder !== "function") {
                reject("Meticulous recorder failed to initialise.");
                return;
            }
            try {
                initialiseRecorder();
            } catch (error) {
                reject(error);
            }
            resolve();
        };
        script.onerror = ()=>{
            reject("Meticulous recorder failed to initialise.");
        };
        document.head.appendChild(script);
    });
};
const $5d774bdb3a883001$export$9da0cde53b499187 = $5d774bdb3a883001$var$unsafeLoadAndStartRecorder;




export {$5d774bdb3a883001$export$9da0cde53b499187 as loadAndStartRecorder, $5d774bdb3a883001$export$f80553af9d70f9fd as tryLoadAndStartRecorder};
//# sourceMappingURL=module.js.map
